@page "/"
@using System.Timers
@using MadnessOf3rdSeptember.Upgrade
@inject GameState _gameState;

<PageTitle>Счетчик 3 сентября</PageTitle>
<div class="container">
    <div class="row">
        <div class="col border border-primary">
            Статистика на фоне шуфутинского
        </div>
        <div class="col border border-primary d-flex justify-content-center flex-column">
            
            <h1>Счетчик 3 сентября</h1>
            
            <p role="status">Текущее 3 сентября номер: @_gameState.CurrentScore</p>
            <button @onclick="_gameState.ClearAll">Сбросить прогресс</button>
            <img src="images/calendar.png" alt="" @onclick="IncrementScore"/>
            
        </div>
        <div class="col border border-primary">
            <h1>Апгрейды</h1>
            <h2>Можно купить:</h2>
            <button @onclick="BuyGuitar">Гитара @_gameState.Upgrades.First(x => x.Name == "Guitar").CurrentCost</button>
            
            <h2>Куплено:</h2>
            
            @foreach (var item in ShowReachedUpgrades())
            {
                @item.Name
            }
        </div>
    </div>
</div>


@code {
    private void IncrementScore()
    {
        _gameState.IncrementScore(1);
    }

    protected override async Task OnInitializedAsync()
    {
        await StartGame();
    }

    private async Task StartGame()
    {
        await _gameState.LoadGameState();
        var timer = new Timer(1000);
        timer.Elapsed += async (source, e) => await Update(source, e);
        
        timer.Enabled = true;
    }
    
    private async Task Update(Object source, ElapsedEventArgs e)
    {
        foreach (var upgrade in _gameState.Upgrades)
        {
            _gameState.IncrementScore(upgrade.CountByLevel * upgrade.CurrentLevel);
        }

        await _gameState.SaveGameState();
        StateHasChanged();
    }
    
    private void BuyGuitar()
    {
        var guitar =  _gameState.Upgrades.First(x => x.Name == "Guitar");
        _gameState.CurrentScore = guitar!.Buy(_gameState.CurrentScore);
    }

    private IList<IUpgrade> ShowReachedUpgrades()
    {
        IList<IUpgrade> reachedUpgrades = new List<IUpgrade>();
        foreach (var upgrade in _gameState.Upgrades)
        {
            if (upgrade.CurrentLevel > 0)
                reachedUpgrades.Add(upgrade);
        }

        return reachedUpgrades;
    }
}
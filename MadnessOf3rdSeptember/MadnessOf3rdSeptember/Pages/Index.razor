@page "/"
@using System.Timers
@using MadnessOf3rdSeptember.Upgrade
@inject GameState _gameState;

<PageTitle>Счетчик 3 сентября</PageTitle>
<div class="container h-75">
    <div class="row h-100">
        <div class="col-4 border border-4 border-dark statistics-wrap">
            <div class="statistics-bg">
                <img src="images/shufutinskiy.png"/>
            </div>

            <div class="statistics-content">
                <div class="fs-1 fw-bold outlined-text">Статистика</div>
                <div class="fs-2 fw-bold outlined-text">Всего листов сорвано: @_gameState.TotalScore</div>
                <div class="fs-2 fw-bold outlined-text">Всего апгрейдов куплено: @TotalUpgrades()</div>
                <div class="fs-2 fw-bold outlined-text">Эссенция шуфутинского: 0</div>
                <Button Color="ButtonColor.Primary" @onclick="() => _gameState.InitiateGameState()">Сбросить всё</Button>
            </div>

        </div>
        <div class="col-4 border border-4 border-dark d-flex justify-content-center flex-column">

            <div class="fs-1 fw-bold outlined-text text-center">3 сентября номер</div>
            <div class="fs-1 fw-bold outlined-text text-center">@_gameState.CurrentScore</div>
            <button @onclick="_gameState.ClearAll">Сбросить прогресс</button>
            
            <div class="calendar-wrap">
                <img src="images/newCalendar.png" alt="" @onclick="IncrementScore" class="calendar-image"/>
            </div>

        </div>
        <div class="col-4 border border-4 border-dark upgrades-wrap">
            <div class="upgrades-bg">
                <img src="images/shufutinskiy.png"/>
            </div>

            <div class="upgrades-content">
                <div class="fs-1 fw-bold outlined-text">Апгрейды</div>
                <div class="fs-2 fw-bold outlined-text">Можно купить:</div>
                <Tooltip Class="d-inline-block" Title="Какое-то описание" role="button">
                    <button @onclick="BuyGuitar">Гитара. Цена улучшения: @_gameState.Upgrades.First(x => x.Name == "Guitar").CurrentCost</button>
                </Tooltip>
                <br/>
                <button @onclick="BuyFanFestival">Фестиваль фанатов. Цена улучшения: @_gameState.Upgrades.First(x => x.Name == "FanFestival").CurrentCost</button>

                <div class="fs-3 fw-bold outlined-text">Куплено:</div>

                @foreach (var item in ShowReachedUpgrades())
                {
                    @item.Name
                    <br/>
                }
            </div>
        </div>
    </div>
</div>


@code {

    private void IncrementScore()
    {
        _gameState.IncrementScore(1);
    }

    protected override async Task OnInitializedAsync()
    {
        await StartGame();
    }


    private async Task StartGame()
    {
        await _gameState.LoadGameState();
        var timer = new Timer(1000);
        timer.Elapsed += async (source, e) => await Update(source, e);

        timer.Enabled = true;
    }

    private async Task Update(Object source, ElapsedEventArgs e)
    {
        foreach (var upgrade in _gameState.Upgrades)
        {
            _gameState.IncrementScore(upgrade.CountByLevel * upgrade.CurrentLevel);
        }

        await _gameState.SaveGameState();
        StateHasChanged();
    }

    private void BuyGuitar()
    {
        var guitar = _gameState.Upgrades.First(x => x.Name == "Guitar");
        _gameState.CurrentScore = guitar!.Buy(_gameState.CurrentScore);
    }

    private void BuyFanFestival()
    {
        var festival = _gameState.Upgrades.First(x => x.Name == "FanFestival");
        _gameState.CurrentScore = festival!.Buy(_gameState.CurrentScore);
    }

    private IList<IUpgrade> ShowReachedUpgrades()
    {
        IList<IUpgrade> reachedUpgrades = new List<IUpgrade>();
        foreach (var upgrade in _gameState.Upgrades)
        {
            if (upgrade.CurrentLevel > 0)
                reachedUpgrades.Add(upgrade);
        }

        return reachedUpgrades;
    }

    protected int TotalUpgrades()
    {
        return _gameState.Upgrades.Select(x => x.CurrentLevel).Sum();
    }

}